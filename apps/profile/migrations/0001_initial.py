# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-09-12 11:44
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254)),
                ('adres', models.CharField(blank=True, max_length=255, verbose_name='Straat+huisnr')),
                ('postcode', models.CharField(blank=True, max_length=15, verbose_name='Postcode')),
                ('gemeente', models.CharField(blank=True, max_length=255, verbose_name='Gemeente')),
                ('land', models.CharField(blank=True, default='Belgi\xeb', max_length=255, verbose_name='Land')),
                ('telefoon', models.CharField(blank=True, max_length=50, verbose_name='Telefoon')),
                ('gsm', models.CharField(blank=True, max_length=50, verbose_name='GSM')),
                ('geboortedatum', models.DateField(blank=True, null=True, verbose_name='Geboortedatum')),
                ('nickname', models.CharField(blank=True, max_length=255, verbose_name='nickname')),
                ('aanspreektitel', models.CharField(blank=True, max_length=255, verbose_name='aanspreetitel')),
                ('aanspreeknaam', models.CharField(blank=True, max_length=255, verbose_name='aanspreeknaam')),
                ('is_ouder', models.BooleanField(default=False)),
                ('is_leerling', models.BooleanField(default=False)),
                ('is_klasouder', models.BooleanField(default=False)),
                ('is_leerkracht', models.BooleanField(default=False)),
                ('is_medewerker', models.BooleanField(default=False)),
                ('gescheiden', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('klascode', models.CharField(max_length=10, unique=True)),
                ('klasnaam', models.CharField(max_length=20)),
                ('slug', models.SlugField()),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='klas',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='profile.ClassRoom'),
        ),
        migrations.AddField(
            model_name='profile',
            name='klas_ouder',
            field=models.ManyToManyField(blank=True, related_name='klasouders', to='profile.ClassRoom'),
        ),
        migrations.AddField(
            model_name='profile',
            name='klasleerkracht',
            field=models.ManyToManyField(blank=True, related_name='leerkracht', to='profile.ClassRoom'),
        ),
        migrations.AddField(
            model_name='profile',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='_profile_parents_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='profile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
